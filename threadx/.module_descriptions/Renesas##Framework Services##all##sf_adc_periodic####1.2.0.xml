<?xml version="1.0" ?>
<synergyModuleDescription>
<!-- SF Periodic ADC XML START here-->  
    <config id="config.framework.sf_adc_periodic" path="ssp_cfg/framework/sf_adc_periodic_cfg.h" version="0">
        <property default="config.framework.sf_adc_periodic.param_checking_enable.bsp" display="Parameter Checking" id="config.framework.sf_adc_periodic.param_checking_enable">
            <option display="Default (BSP)" id="config.framework.sf_adc_periodic.param_checking_enable.bsp" value="(BSP_CFG_PARAM_CHECKING_ENABLE)"/>
            <option display="Enabled" id="config.framework.sf_adc_periodic.param_checking_enable.enabled" value="(1)"/>
            <option display="Disabled" id="config.framework.sf_adc_periodic.param_checking_enable.disabled" value="(0)"/>
        </property>
        <content>#define SF_ADC_PERIODIC_CFG_PARAM_CHECKING_ENABLE ${config.framework.sf_adc_periodic.param_checking_enable}
        </content>
    </config>   
    <module config="config.framework.sf_adc_periodic" display="Framework|Analog|${module.framework.sf_adc_periodic.name} ADC Periodic Framework on sf_adc_periodic" id="module.framework.sf_adc_periodic_on_sf_adc_periodic" version="1">
         <constraint display="Module instances must have unique names">
            "${interface.framework.sf_adc_periodic.${module.framework.sf_adc_periodic.name}}" === "1"
        </constraint>
        <requires interface="_rtos" />
        <requires id="module.framework.sf_adc_periodic.requires.adc" interface="interface.driver.adc" display="Add ADC Driver" >
            <override property="module.driver.adc.trigger" value= "module.driver.adc.trigger.trigger_sync_elc"/>
            <override property="module.driver.adc.mode" value= "module.driver.adc.mode.mode_single_scan"/>
            <override property="module.driver.adc.p_callback" value= "NULL"/>
        </requires>
        <requires id="module.framework.sf_adc_periodic.requires.timer" interface="interface.driver.timer_on_gpt" display="Add GPT Driver" > <!-- Requires GPT currently -->
        	<override property="module.driver.timer.channel" value= "${module.framework.sf_adc_periodic.scan_trigger}"/>
            <override property="module.driver.timer.mode" value= "module.driver.timer.mode.mode_periodic"/>
            <override property="module.driver.timer.autostart" value= "module.driver.timer.autostart.false"/>
            <override property="module.driver.timer.p_callback" value= "NULL"/>
        </requires>        
        <requires id="module.framework.sf_adc_periodic.requires.transfer" interface="interface.driver.transfer_on_dtc" display="Add DTC Driver" > <!-- Requires DTC currently. Cannot use DMAC. -->
			<override property="module.driver.transfer.size" value= "module.driver.transfer.size.size_2_byte"/>
			<override property="module.driver.transfer.mode" value= "module.driver.transfer.mode.mode_block"/>
			<override property="module.driver.transfer.dest_addr_mode" value="module.driver.transfer.dest_addr_mode.addr_mode_incremented"/>
			<override property="module.driver.transfer.src_addr_mode" value="module.driver.transfer.src_addr_mode.addr_mode_incremented"/>
			<override property="module.driver.transfer.repeat_area" value="module.driver.transfer.repeat_area.repeat_area_source"/>
			<override property="module.driver.transfer.p_dest" value="NULL"/>
			<override property="module.driver.transfer.p_src" value="NULL"/>
			<override property="module.driver.transfer.length" value="1"/>
			<override property="module.driver.transfer.interrupt" value="module.driver.transfer.interrupt.interrupt_end"/>
			<override property="module.driver.transfer.num_blocks" value="1"/>
			<override property="module.driver.transfer.auto_enable" value="module.driver.transfer.auto_enable.false"/>
			<override property="module.driver.transfer.p_callback" value="NULL"/>
			<override property="module.driver.transfer.activation_source" value="module.driver.transfer.event.event_s12ad0_adi"/>
		</requires>
        <provides interface="interface.framework.sf_adc_periodic" />
        <provides interface="interface.framework.sf_adc_periodic_on_sf_adc_periodic" />
        <provides interface="interface.framework.sf_adc_periodic.${module.framework.sf_adc_periodic.name}" />
        <property id="module.framework.sf_adc_periodic.name" display="Name" default="g_sf_adc_periodic${_instance}">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.framework.sf_adc_periodic.name}")</constraint>
        </property>     
        <property id="module.framework.sf_adc_periodic.data_buffer" display="Name of the data-buffer to store samples" default="g_user_buffer">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.framework.sf_adc_periodic.data_buffer}")</constraint>
        </property> 
        <property id="module.framework.sf_adc_periodic.data_buffer_length" display="Length of the data-buffer" default="128">
            <constraint display="Value must be an integer greater than 0">testInteger("${module.framework.sf_adc_periodic.data_buffer_length}")  &amp;&amp; ("${module.framework.sf_adc_periodic.data_buffer_length}" &gt; 0)</constraint>
        </property>
        <property id="module.framework.sf_adc_periodic.sample_count" display="Number of sampling iterations" default="10">
            <constraint display="Value must be an integer greater than 0">testInteger("${module.framework.sf_adc_periodic.sample_count}")  &amp;&amp; ("${module.framework.sf_adc_periodic.sample_count}" &gt; 0)</constraint>
        </property>
        <property id="module.framework.sf_adc_periodic.scan_trigger" display="GPT Timer channel used to trigger the scan" default="module.framework.sf_adc_periodic.scan_trigger.gpt_channel_0">
            <option display="Channel 0" id="module.framework.sf_adc_periodic.scan_trigger.gpt_channel_0" value="0"/>
            <option display="Channel 1" id="module.framework.sf_adc_periodic.scan_trigger.gpt_channel_1" value="1"/>
            <option display="Channel 2" id="module.framework.sf_adc_periodic.scan_trigger.gpt_channel_2" value="2"/>
            <option display="Channel 3" id="module.framework.sf_adc_periodic.scan_trigger.gpt_channel_3" value="3"/>
            <option display="Channel 4" id="module.framework.sf_adc_periodic.scan_trigger.gpt_channel_4" value="4"/>
            <option display="Channel 5" id="module.framework.sf_adc_periodic.scan_trigger.gpt_channel_5" value="5"/>
            <option display="Channel 6" id="module.framework.sf_adc_periodic.scan_trigger.gpt_channel_6" value="6"/>
            <option display="Channel 7" id="module.framework.sf_adc_periodic.scan_trigger.gpt_channel_7" value="7"/>
            <option display="Channel 8" id="module.framework.sf_adc_periodic.scan_trigger.gpt_channel_8" value="8"/>
            <option display="Channel 9" id="module.framework.sf_adc_periodic.scan_trigger.gpt_channel_9" value="9"/>
            <option display="Channel 10" id="module.framework.sf_adc_periodic.scan_trigger.gpt_channel_10" value="10"/>
            <option display="Channel 11" id="module.framework.sf_adc_periodic.scan_trigger.gpt_channel_11" value="11"/>
            <option display="Channel 12" id="module.framework.sf_adc_periodic.scan_trigger.gpt_channel_12" value="12"/>
        </property>
        <property id="module.framework.sf_adc_periodic.p_callback" display="Callback" default="g_adc_framework_user_callback">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.framework.sf_adc_periodic.p_callback}")</constraint>
        </property>      
        <header>
            /** ADC Periodic on ADC Periodic instance */
            extern sf_adc_periodic_instance_t ${module.framework.sf_adc_periodic.name};
            /** Buffer where the sampled data will be stored for application usage */
            extern uint16_t ${module.framework.sf_adc_periodic.data_buffer}[${module.framework.sf_adc_periodic.data_buffer_length}];
            #ifndef ${module.framework.sf_adc_periodic.p_callback}
            void ${module.framework.sf_adc_periodic.p_callback}(sf_adc_periodic_callback_args_t * p_args);
            #endif
            void ${module.framework.sf_adc_periodic.name}_err_callback(void * p_instance, void * p_data);
        </header>
        <includes>
            #include &quot;sf_adc_periodic.h&quot;
        </includes>
    <declarations>
            #if defined(__ICCARM__)
            #define ${module.framework.sf_adc_periodic.name}_err_callback_WEAK_ATTRIBUTE
            #pragma weak ${module.framework.sf_adc_periodic.name}_err_callback  = ${module.framework.sf_adc_periodic.name}_err_callback_internal
            #elif defined(__GNUC__)
            #define ${module.framework.sf_adc_periodic.name}_err_callback_WEAK_ATTRIBUTE   __attribute__ ((weak, alias("${module.framework.sf_adc_periodic.name}_err_callback_internal")))
            #endif
            void ${module.framework.sf_adc_periodic.name}_err_callback(void * p_instance, void * p_data) ${module.framework.sf_adc_periodic.name}_err_callback_WEAK_ATTRIBUTE;
            #if ADC_PERIODIC_ON_ADC_PERIODIC_CALLBACK_USED_${module.framework.sf_adc_periodic.name}
            void ${module.framework.sf_adc_periodic.p_callback}(sf_adc_periodic_callback_args_t * p_args);
            #endif
            uint16_t ${module.framework.sf_adc_periodic.data_buffer}[${module.framework.sf_adc_periodic.data_buffer_length}];
            sf_adc_periodic_instance_ctrl_t ${module.framework.sf_adc_periodic.name}_ctrl; 
            sf_adc_periodic_cfg_t ${module.framework.sf_adc_periodic.name}_cfg =
            {
                .p_lower_lvl_adc      = &amp;${module.framework.sf_adc_periodic.requires.adc::module.driver.adc.name},
                .p_lower_lvl_timer    = &amp;${module.framework.sf_adc_periodic.requires.timer::module.driver.timer.name},
                .p_lower_lvl_transfer = &amp;${module.framework.sf_adc_periodic.requires.transfer::module.driver.transfer.name},
                .p_data_buffer        = ${module.framework.sf_adc_periodic.data_buffer},
                .data_buffer_length   = ${module.framework.sf_adc_periodic.data_buffer_length},
                .sample_count         = ${module.framework.sf_adc_periodic.sample_count},
                .scan_trigger         = ELC_EVENT_GPT${module.framework.sf_adc_periodic.scan_trigger}_COUNTER_OVERFLOW,
                .p_callback           = ${module.framework.sf_adc_periodic.p_callback},
                .p_extend             = NULL,
            };
    
            sf_adc_periodic_instance_t ${module.framework.sf_adc_periodic.name} =
            {
                .p_ctrl = &amp;${module.framework.sf_adc_periodic.name}_ctrl,
                .p_cfg =  &amp;${module.framework.sf_adc_periodic.name}_cfg,
                .p_api =  &amp;g_sf_adc_periodic_on_sf_adc_periodic,
            };
            /*******************************************************************************************************************//**
               * @brief      This is a weak example initialization error function.  It should be overridden by defining a user  function 
               *             with the prototype below.
               *             - void ${module.framework.sf_adc_periodic.name}_err_callback(void * p_instance, void * p_data)
               *
               * @param[in]  p_instance arguments used to identify which instance caused the error and p_data Callback arguments used to identify what error caused the callback.
               **********************************************************************************************************************/
              void ${module.framework.sf_adc_periodic.name}_err_callback_internal(void * p_instance, void * p_data);
              void ${module.framework.sf_adc_periodic.name}_err_callback_internal(void * p_instance, void * p_data)
              {
                /** Suppress compiler warning for not using parameters. */
                SSP_PARAMETER_NOT_USED(p_instance);
                SSP_PARAMETER_NOT_USED(p_data);

                /** An error has occurred. Please check function arguments for more information. */
                BSP_CFG_HANDLE_UNRECOVERABLE_ERROR(0);
              } 
    </declarations>
            <init>
            ssp_err_t ssp_err_${module.framework.sf_adc_periodic.name};
            ssp_err_${module.framework.sf_adc_periodic.name} = ${module.framework.sf_adc_periodic.name}.p_api->open(${module.framework.sf_adc_periodic.name}.p_ctrl, ${module.framework.sf_adc_periodic.name}.p_cfg);
            if (SSP_SUCCESS != ssp_err_${module.framework.sf_adc_periodic.name})
            {
                  ${module.framework.sf_adc_periodic.name}_err_callback((void *)&amp;${module.framework.sf_adc_periodic.name},&amp;ssp_err_${module.framework.sf_adc_periodic.name});
            }
        </init>
    </module>
</synergyModuleDescription>
