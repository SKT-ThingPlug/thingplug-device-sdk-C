<?xml version="1.0" encoding="UTF-8"?>
<synergyModuleDescription>
    <config id="config.el.nx_auto_ip" path="ssp_cfg/framework/el/nx_auto_ip_cfg.h" version="0">
        <property default="1" display="Wait before sending first probe (seconds)" id="config.el.nx_auto_ip.probe_wait">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.el.nx_auto_ip.probe_wait}")  &amp;&amp; ("${config.el.nx_auto_ip.probe_wait}" &gt;= 0)
            </constraint>
        </property>
        <property default="3" display="ARP probes to send" id="config.el.nx_auto_ip.probe_num">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.el.nx_auto_ip.probe_num}")  &amp;&amp; ("${config.el.nx_auto_ip.probe_num}" &gt;= 0)
            </constraint>
        </property>
        <property default="1" display="Minimum wait between probes (seconds)" id="config.el.nx_auto_ip.probe_min">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.el.nx_auto_ip.probe_min}")  &amp;&amp; ("${config.el.nx_auto_ip.probe_min}" &gt;= 0)
            </constraint>
        </property>
        <property default="2" display="Maximum wait between probes (seconds)" id="config.el.nx_auto_ip.probe_max">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.el.nx_auto_ip.probe_max}")  &amp;&amp; ("${config.el.nx_auto_ip.probe_max}" &gt;= 0)
            </constraint>
        </property>
        <property default="10" display="Maximum conflicts before increasing processing delay" id="config.el.nx_auto_ip.max_conflicts">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.el.nx_auto_ip.max_conflicts}")  &amp;&amp; ("${config.el.nx_auto_ip.max_conflicts}" &gt;= 0) 
            </constraint>
        </property>
        <property default="60" display="Wait extend after maximum conflicts (seconds)" id="config.el.nx_auto_ip.rate_limit_interval">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.el.nx_auto_ip.rate_limit_interval}")  &amp;&amp; ("${config.el.nx_auto_ip.rate_limit_interval}" &gt;= 0)
            </constraint>
        </property>
        <property default="2" display="Wait before announcement (seconds)" id="config.el.nx_auto_ip.announce_wait">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.el.nx_auto_ip.announce_wait}")  &amp;&amp; ("${config.el.nx_auto_ip.announce_wait}" &gt;= 0)
            </constraint>
        </property>
        <property default="2" display="Number of ARP announces" id="config.el.nx_auto_ip.announce_num">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.el.nx_auto_ip.announce_num}")  &amp;&amp; ("${config.el.nx_auto_ip.announce_num}" &gt;= 0)
            </constraint>
        </property>
        <property default="2" display="Wait between announces (seconds)" id="config.el.nx_auto_ip.announce_interval">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.el.nx_auto_ip.announce_interval}")  &amp;&amp; ("${config.el.nx_auto_ip.announce_interval}" &gt;= 0)
            </constraint>
        </property>
        <property default="10" display="Wait between defense announces (seconds)" id="config.el.nx_auto_ip.defend_interval">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.el.nx_auto_ip.defend_interval}")  &amp;&amp; ("${config.el.nx_auto_ip.defend_interval}" &gt;= 0)
            </constraint>
        </property>
        <content>
            #define NX_AUTO_IP_PROBE_WAIT                    ${config.el.nx_auto_ip.probe_wait}
            #define NX_AUTO_IP_PROBE_NUM                     ${config.el.nx_auto_ip.probe_num}
            #define NX_AUTO_IP_PROBE_MIN                     ${config.el.nx_auto_ip.probe_min}
            #define NX_AUTO_IP_PROBE_MAX                     ${config.el.nx_auto_ip.probe_max}
            #define NX_AUTO_IP_MAX_CONFLICTS                 ${config.el.nx_auto_ip.max_conflicts}
            #define NX_AUTO_IP_RATE_LIMIT_INTERVAL           ${config.el.nx_auto_ip.rate_limit_interval}
            #define NX_AUTO_IP_ANNOUNCE_WAIT                 ${config.el.nx_auto_ip.announce_wait}
            #define NX_AUTO_IP_ANNOUNCE_NUM                  ${config.el.nx_auto_ip.announce_num}
            #define NX_AUTO_IP_ANNOUNCE_INTERVAL             ${config.el.nx_auto_ip.announce_interval}
            #define NX_AUTO_IP_DEFEND_INTERVAL               ${config.el.nx_auto_ip.defend_interval}
        </content>
    </config>
    <module  config="config.el.nx_auto_ip" display="X-Ware|NetX|Protocols|${module.el.nx_auto_ip.name} NetX Auto IP" id="module.el.nx_auto_ip" version="1">
        <constraint display="Module instances must have unique names">
            "${interface.el.nx_auto_ip.${module.el.nx_auto_ip.name}}" === "1"
            </constraint>
        <requires interface="_rtos" />
        <requires id="module.el.nx_auto_ip.requires.nx.ip" interface="interface.el.nx_original.ip" display="Add NetX IP Instance" >
            <override property="module.el.nx.ip.address" value="0,0,0,0" />
            <override property="module.el.nx.ip.arp" value="module.el.nx.ip.arp.enable" />
        </requires>
        
        <!-- NetX and NetX Duo -->
        <provides interface="interface.el.nx_auto_ip" />
        <provides interface="interface.el.nx_auto_ip.${module.el.nx_auto_ip.name}" />
        <!-- NetX only -->
        <provides interface="interface.el.nx_original_auto_ip" />
        <provides interface="interface.el.nx_original_auto_ip.${module.el.nx_auto_ip.name}" />
        
        <property default="g_auto_ip${_instance}" display="Name" id="module.el.nx_auto_ip.name">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.el.nx_auto_ip.name}")
            </constraint>
        </property>
        <property default="2048" display="Internal thread stack size (bytes)" id="module.el.nx_auto_ip.stack_size">
            <constraint display="Value must be a non-negative integer and divisible by 8">
                testInteger("${module.el.nx_auto_ip.stack_size}")  &amp;&amp; (("${module.el.nx_auto_ip.stack_size}" % 8) == 0)
            </constraint>
        </property>
        <property default="3" display="Internal thread priority" id="module.el.nx_auto_ip.priority">
            <constraint display="Value must be a non-negative integer">
                testInteger("${module.el.nx_auto_ip.priority}")  &amp;&amp; ("${module.el.nx_auto_ip.priority}" &gt;= 0)
            </constraint>
        </property>
        <header>
            extern NX_AUTO_IP  ${module.el.nx_auto_ip.name};
            void ${module.el.nx_auto_ip.name}_err_callback(void * p_instance, void * p_data);
        </header>
        <includes>
            #include "nx_auto_ip.h"
        </includes>
        <macros>
        </macros>
        <declarations>
            #if defined(__ICCARM__)
            #define ${module.el.nx_auto_ip.name}_err_callback_WEAK_ATTRIBUTE
            #pragma weak ${module.el.nx_auto_ip.name}_err_callback  = ${module.el.nx_auto_ip.name}_err_callback_internal
            #elif defined(__GNUC__)
            #define ${module.el.nx_auto_ip.name}_err_callback_WEAK_ATTRIBUTE   __attribute__ ((weak, alias("${module.el.nx_auto_ip.name}_err_callback_internal")))
            #endif
            void ${module.el.nx_auto_ip.name}_err_callback(void * p_instance, void * p_data) ${module.el.nx_auto_ip.name}_err_callback_WEAK_ATTRIBUTE;
            NX_AUTO_IP  ${module.el.nx_auto_ip.name};
            uint8_t     ${module.el.nx_auto_ip.name}_stack_memory[${module.el.nx_auto_ip.stack_size}];
            /*******************************************************************************************************************//**
               * @brief      This is a weak example initialization error function.  It should be overridden by defining a user  function 
               *             with the prototype below.
               *             - void ${module.el.nx_auto_ip.name}_err_callback(void * p_instance, void * p_data)
               *
               * @param[in]  p_instance arguments used to identify which instance caused the error and p_data Callback arguments used to identify what error caused the callback.
               **********************************************************************************************************************/
            void ${module.el.nx_auto_ip.name}_err_callback_internal(void * p_instance, void * p_data);
            void ${module.el.nx_auto_ip.name}_err_callback_internal(void * p_instance, void * p_data)
            {
                /** Suppress compiler warning for not using parameters. */
                SSP_PARAMETER_NOT_USED(p_instance);
                SSP_PARAMETER_NOT_USED(p_data);

                /** An error has occurred. Please check function arguments for more information. */
                BSP_CFG_HANDLE_UNRECOVERABLE_ERROR(0);
            }
        </declarations>
        <init>
            UINT ${module.el.nx_auto_ip.name}_err;
            /* Create AutoIP Instance. */
            ${module.el.nx_auto_ip.name}_err = nx_auto_ip_create(&amp;${module.el.nx_auto_ip.name},
                                                                 "${module.el.nx_auto_ip.name} Auto IP",
                                                                 &amp;${module.el.nx_auto_ip.requires.nx.ip::module.el.nx.ip.name},
                                                                 &amp;${module.el.nx_auto_ip.name}_stack_memory,
                                                                 ${module.el.nx_auto_ip.stack_size},
                                                                 ${module.el.nx_auto_ip.priority});
            if (NX_SUCCESS != ${module.el.nx_auto_ip.name}_err)
            {
                ${module.el.nx_auto_ip.name}_err_callback((void *)&amp;${module.el.nx_auto_ip.name},&amp;${module.el.nx_auto_ip.name}_err);
            }
        </init>
    </module>
</synergyModuleDescription>