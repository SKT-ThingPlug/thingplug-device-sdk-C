<?xml version="1.0" encoding="UTF-8"?>
<synergyModuleDescription>
    <config id="config.el.nx_pop3_client" path="ssp_cfg/framework/el/nx_pop3_client_cfg.h" version="0">
        <property default="2000" display="Maximum buffer size to store messages (bytes)" id="config.el.nx_pop3_client.mail_buffer_size">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.el.nx_pop3_client.mail_buffer_size}")  &amp;&amp; ("${config.el.nx_pop3_client.mail_buffer_size}" &gt;= 0)
            </constraint>
        </property>
        <property default="1" display="Packet time out (seconds)" id="config.el.nx_pop3_client.packet_time_out">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.el.nx_pop3_client.packet_time_out}")  &amp;&amp; ("${config.el.nx_pop3_client.packet_time_out}" &gt;= 0)
            </constraint>
        </property>
        <property default="30" display="Connection time out (seconds)" id="config.el.nx_pop3_client.connection_time_out">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.el.nx_pop3_client.connection_time_out}")  &amp;&amp; ("${config.el.nx_pop3_client.connection_time_out}" &gt;= 0)
            </constraint>
        </property>
        <property default="2" display="Disconnect time out (seconds)" id="config.el.nx_pop3_client.disconnect_time_out">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.el.nx_pop3_client.disconnect_time_out}")  &amp;&amp; ("${config.el.nx_pop3_client.disconnect_time_out}" &gt;= 0)
            </constraint>
        </property>
        <property default="2" display="TCP socket send wait (seconds)" id="config.el.nx_pop3_client.tcp_socket_wait">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.el.nx_pop3_client.tcp_socket_wait}")  &amp;&amp; ("${config.el.nx_pop3_client.tcp_socket_wait}" &gt;= 0)
            </constraint>
        </property>
        <property default="10" display="Server reply timeout (seconds)" id="config.el.nx_pop3_client.server_reply_timeout">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.el.nx_pop3_client.server_reply_timeout}")  &amp;&amp; ("${config.el.nx_pop3_client.server_reply_timeout}" &gt;= 0)
            </constraint>
        </property>
        <property default="1460" display="TCP window size (bytes)" id="config.el.nx_pop3_client.client_tcp_window_size">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.el.nx_pop3_client.client_tcp_window_size}")  &amp;&amp; ("${config.el.nx_pop3_client.client_tcp_window_size}" &gt;= 0)
            </constraint>
        </property>
        <property default="40" display="Maximum user name length (bytes)" id="config.el.nx_pop3_client.max_username">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.el.nx_pop3_client.max_username}")  &amp;&amp; ("${config.el.nx_pop3_client.max_username}" &gt;= 0)
            </constraint>
        </property>
        <property default="20" display="Maximum password length (bytes)" id="config.el.nx_pop3_client.max_password">
            <constraint display="Value must be a non-negative integer">
                testInteger("${config.el.nx_pop3_client.max_password}")  &amp;&amp; ("${config.el.nx_pop3_client.max_password}" &gt;= 0)
            </constraint>
        </property>
        <content>
            #define NX_POP3_CLIENT_MAIL_BUFFER_SIZE            (${config.el.nx_pop3_client.mail_buffer_size})
            #define NX_POP3_CLIENT_PACKET_TIMEOUT              (${config.el.nx_pop3_client.packet_time_out} * NX_IP_PERIODIC_RATE)
            #define NX_POP3_CLIENT_CONNECTION_TIMEOUT          (${config.el.nx_pop3_client.connection_time_out} * NX_IP_PERIODIC_RATE)
            #define NX_POP3_CLIENT_DISCONNECT_TIMEOUT          (${config.el.nx_pop3_client.disconnect_time_out} * NX_IP_PERIODIC_RATE)
            #define NX_POP3_TCP_SOCKET_SEND_WAIT               (${config.el.nx_pop3_client.tcp_socket_wait} * NX_IP_PERIODIC_RATE)
            #define NX_POP3_SERVER_REPLY_TIMEOUT               (${config.el.nx_pop3_client.server_reply_timeout} * NX_IP_PERIODIC_RATE)
            #define NX_POP3_CLIENT_TCP_WINDOW_SIZE             (${config.el.nx_pop3_client.client_tcp_window_size})
            #define NX_POP3_MAX_USERNAME                       (${config.el.nx_pop3_client.max_username})
            #define NX_POP3_MAX_PASSWORD                       (${config.el.nx_pop3_client.max_password})
        </content>
    </config>
    <module config="config.el.nx_pop3_client" display="X-Ware|NetX|Protocols|${module.el.nx_pop3_client.name} NetX POP3 Client" id="module.el.nx_pop3_client" version="1">
        <constraint display="Module instances must have unique names">
            "${interface.el.nx_pop3_client.${module.el.nx_pop3_client.name}}" === "1"
            </constraint>
        <requires interface="_rtos" />
        <requires id="module.el.nx_pop3_client.requires.nx.ip" interface="interface.el.nx_original.ip" display="Add NetX IP Instance" >
            <override property="module.el.nx.ip.arp" value="module.el.nx.ip.arp.enable" />
            <override property="module.el.nx.ip.tcp" value="module.el.nx.ip.tcp.enable" />
        </requires>
        <requires id="module.el.nx_pop3_client.requires.nx.packet_pool" interface="interface.el.nx_original.packet_pool" display="Add NetX Packet Pool" />
        <requires id="module.el.nx_pop3_client.requires.nx_md5" interface="interface.el.nx_md5" display="Add NetX MD5" />
        
        <!-- NetX and NetX Duo -->
        <provides interface="interface.el.nx_pop3_client" />
        <provides interface="interface.el.nx_pop3_client.${module.el.nx_pop3_client.name}" />
        <!-- NetX only -->
        <provides interface="interface.el.nx_original_pop3_client" />
        <provides interface="interface.el.nx_original_pop3_client.${module.el.nx_pop3_client.name}" />
        
        <property default="g_pop3_client${_instance}" display="Name" id="module.el.nx_pop3_client.name">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.el.nx_pop3_client.name}")
            </constraint>
        </property>
        <property default="module.el.nx_pop3_client.apop_authentication.disable" display="APOP Authentication" id="module.el.nx_pop3_client.apop_authentication">
            <option id="module.el.nx_pop3_client.apop_authentication.enable" display="Enable" value="NX_TRUE" />
            <option id="module.el.nx_pop3_client.apop_authentication.disable" display="Disable" value="NX_FALSE" />
        </property>
        <property default="192,168,0,2" display="Server IPv4 Address (use commas for separation)" id="module.el.nx_pop3_client.server_address">
            <constraint display="Must be valid IP address separated by commas">"${module.el.nx_pop3_client.server_address}".split(",").length == 4
            </constraint>
        </property>
        <property default="110" display="Server Port number" id="module.el.nx_pop3_client.server_port">
            <constraint display="Value must be a non-negative integer">
                testInteger("${module.el.nx_pop3_client.server_port}")  &amp;&amp; ("${module.el.nx_pop3_client.server_port}" &gt;= 0)
            </constraint>
        </property>
        <property default="username@domain.com" display="Client Name" id="module.el.nx_pop3_client.client_name" />
        <property default="password" display="Client Password" id="module.el.nx_pop3_client.client_password" />
        <property default="module.el.nx_pop3_client.init.disable" display="Auto initialization" id="module.el.nx_pop3_client.init">
            <option display="Enable"  id="module.el.nx_pop3_client.init.enable"  value="1"/>
            <option display="Disable" id="module.el.nx_pop3_client.init.disable" value="0"/>
        </property>
        <property default="pop3_client_init${_instance}" display="Name of generated initialization function" id="module.el.nx_pop3_client.init_function">
            <constraint display="Name must be a valid C symbol">testSymbol("${module.el.nx_pop3_client.init_function}")</constraint>
        </property>
        <header>
        extern NX_POP3_CLIENT  ${module.el.nx_pop3_client.name};
        void ${module.el.nx_pop3_client.name}_err_callback(void * p_instance, void * p_data);
        void ${module.el.nx_pop3_client.init_function}(void);
        </header>
        <includes>
            #include "nx_pop3_client.h"
            #include "nx_md5.h"
        </includes>
        <macros>
        </macros>
        <declarations>
            #if defined(__ICCARM__)
            #define ${module.el.nx_pop3_client.name}_err_callback_WEAK_ATTRIBUTE
            #pragma weak ${module.el.nx_pop3_client.name}_err_callback  = ${module.el.nx_pop3_client.name}_err_callback_internal
            #elif defined(__GNUC__)
            #define ${module.el.nx_pop3_client.name}_err_callback_WEAK_ATTRIBUTE   __attribute__ ((weak, alias("${module.el.nx_pop3_client.name}_err_callback_internal")))
            #endif
            void ${module.el.nx_pop3_client.name}_err_callback(void * p_instance, void * p_data) ${module.el.nx_pop3_client.name}_err_callback_WEAK_ATTRIBUTE;
            NX_POP3_CLIENT  ${module.el.nx_pop3_client.name};
            /*******************************************************************************************************************//**
             * @brief      This is a weak example initialization error function.  It should be overridden by defining a user  function 
             *             with the prototype below.
             *             - void ${module.el.nx_pop3_client.name}_err_callback(void * p_instance, void * p_data)
             *
             * @param[in]  p_instance arguments used to identify which instance caused the error and p_data Callback arguments used to identify what error caused the callback.
             **********************************************************************************************************************/
            void ${module.el.nx_pop3_client.name}_err_callback_internal(void * p_instance, void * p_data);
            void ${module.el.nx_pop3_client.name}_err_callback_internal(void * p_instance, void * p_data)
            {
              /** Suppress compiler warning for not using parameters. */
              SSP_PARAMETER_NOT_USED(p_instance);
              SSP_PARAMETER_NOT_USED(p_data);

              /** An error has occurred. Please check function arguments for more information. */
              BSP_CFG_HANDLE_UNRECOVERABLE_ERROR(0);
            }

              /*******************************************************************************************************************//**
               * @brief     This is nx POP3 initialization function. User Can call this function in the application if required with the below mentioned prototype.
               *            - void ${module.el.nx_pop3_client.init_function}(void)
               **********************************************************************************************************************/
            void ${module.el.nx_pop3_client.init_function} (void)
             {
               UINT ${module.el.nx_pop3_client.name}_err;
               /* Create POP3 Client. */
               ${module.el.nx_pop3_client.name}_err = nx_pop3_client_create(&amp;${module.el.nx_pop3_client.name},
                                                                            ${module.el.nx_pop3_client.apop_authentication},
                                                                            &amp;${module.el.nx_pop3_client.requires.nx.ip::module.el.nx.ip.name},
                                                                            &amp;${module.el.nx_pop3_client.requires.nx.packet_pool::module.el.nx.packet_pool.name},
                                                                            IP_ADDRESS (${module.el.nx_pop3_client.server_address}),
                                                                            ${module.el.nx_pop3_client.server_port},
                                                                            "${module.el.nx_pop3_client.client_name}",
                                                                            "${module.el.nx_pop3_client.client_password}");
               if (NX_SUCCESS != ${module.el.nx_pop3_client.name}_err)
               {
                   ${module.el.nx_pop3_client.name}_err_callback((void *)&amp;${module.el.nx_pop3_client.name},&amp;${module.el.nx_pop3_client.name}_err);
               }
             }
        </declarations>
        <init>
               /** Call POP3 client initialization function. User Can call at later time as well if required. */
               #if (${module.el.nx_pop3_client.init})
                    ${module.el.nx_pop3_client.init_function}(); 
               #endif
        </init>
    </module>
</synergyModuleDescription>